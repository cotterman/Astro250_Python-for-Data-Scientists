###############################################################################
## 
## Goal: Estimate a hitter's true batting average, mu_i, (for the entire
## season) from the first month of data.  Use a beta prior for mu_i and
## and MCMC sampler to get a binomial posterior.
##
## Author: Carolyn Cotterman
##
###############################################################################

import pymc
import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
import random

random.seed(999) #set seed so same results will be obtained with each run
#Actually, results still differ with each run of program.  Why?

###############################################################################

# leads to subfolder of path of script
    # os.path.abspath takes a pathname, which can be partial or even blank, 
        # and returns a fully qualified pathname.
        # in this case, we get back the path, including /predict_batting_mcmc.py 
    # os.path.dirname takes a filename as a string and returns the directory path portion.
        # so it drops the /predict_batting_mcmc.py portion returned by as.path.abspath
HW11_FOLDER = os.path.dirname(os.path.abspath(__file__)) 
DATA_FOLDER = os.path.join(HW11_FOLDER, "hw_11_data")
print "os.path.abspath(__file__): " , os.path.abspath(__file__)
print "HW11_FOLDER: " , HW11_FOLDER
print "DATA_FOLDER: " , DATA_FOLDER



def combine_raw_data(aprilD, fullD):
    """
    Merge raw datasets and keep only relevant variables
    """
    aprilDmod = aprilD.rename(columns={'AVG': 'AVG_MLE', 'AB':'AB_april', 'H':'H_april'})
    fullDmod = fullD.rename(columns={'AVG': 'AVG_truth'})
    combo = pd.merge(aprilDmod[["Player","AVG_MLE","AB_april","H_april"]], 
        fullDmod[["Player","AVG_truth"]], on='Player')
    return combo


def get_MLEs(cleanD):
    """ Calculate the MLEs for batting average (mu_i) using data from April
    """
    #the MLE for batting average is equal to the number of hits divided by
        # the number of times at bat.  This number is already in the data.
    print "\nMLEs for batting average using April Data:\n" , cleanD[["Player", "AVG_MLE"]]
    

def get_prior_params():
    """
    The Beta prior encodes our prior knowledge about baseball batting averages. 
        #The hyperparameters alpha and beta should be chosen to reflect this belief.
        #For this assignment, we will choose alpha and beta based on the 
          league-wide averages from 2010.
          #In 2010 the mean batting average was 0.255 with variance of 0.0011.
          #Choose alpha and beta to satisfy these prior beliefs
    """
    #the mean of the beta distribution is a/(a+b) = .255
    #the variance of the beta distribution is ab/[(a+b)**2 * (a+b+1)] = .0011
    #we have 2 equations and 2 unknowns.  Solving for a and b, we get:
        #(after some pencil-and-paper algebra)
    chunk1 = (.745/.255) / ( (1+(.745/.255))**2 )
    chunk2 = .0011 * (1 + (.745/.255) )
    a = (chunk1 - .0011) / chunk2
    b = a * (.745/.255)
    prior_params = (a,b)
    #test calculation:
    print "Mean of beta prior (compare to .255): " , a/(a+b)
    print "Var of beta prior (compare to .0011): " , (a*b) /((a+b)**2 * (a+b+1))
    return prior_params


def sample_posterior(cleanD, prior_params):

    #arrays to store results
    mean_mus = []
    CI95s = []
    truth_in_CI95s = []

    #relevant data
    N = cleanD.AB_april #number of at-bats
    num_hits = cleanD.H_april #number of hits
    nplayers = cleanD.shape[0] #number of players
    print "nplayers: " , nplayers

    #prior distribution  --- p(theta)
    alpha0 = prior_params[0]
    beta0 = prior_params[1]

    for i in np.arange(nplayers):

        mu = pymc.Beta(name='mu', alpha=alpha0, beta=beta0, value=None)
            
        #model --- value of x (the number of hits), given theta
        @pymc.deterministic(plot=False)
        def modelled_p(mu=mu):
            return mu

        #likelihood for number of hits
        xi = pymc.Binomial('xi', n=N[i], p=modelled_p, value=num_hits[i], observed=True)
        model = pymc.Model([xi, mu])

        #sample from posterior
        mcmc = pymc.MCMC(model)
        N_samp = 10000
        N_burn = 1000
        mcmc.sample(N_samp, N_burn, 1)
        mu_samples = mcmc.trace('mu')[:]

        #summarize results
        mean_mus.append(mu_samples.mean()) #posterior mean
        sorted_ms = sorted(mu_samples)
        upperCI = sorted_ms[int(len(mu_samples)*.95)] #posterior 95% CI, upper limit
        lowerCI = sorted_ms[int(len(mu_samples)*.05)] #posterior 95% CI, lower limit
        CI95s.append([ lowerCI, upperCI  ])
        truth_in_CI95s.append( cleanD.AVG_truth[i]<upperCI and cleanD.AVG_truth[i]>lowerCI )

        #3) graph results for first 3 players
        if i<3:
            pymc.Matplot.plot(mcmc)
            plt.savefig("trace_plots_" + str(i) + ".pdf")

    #4) Compute the posterior mean and posterior 95% CI for each mu_i
        # For how many of the 13 players does the full-season batting average 
        # fall within the 95% CI?
    print "Number of players for which full-season batting avg is within 95% CI: "
    print truth_in_CI95s.count(True)

    players = cleanD.Player.tolist()
    AVG_MLE = cleanD.AVG_MLE.tolist()
    AVG_truth = cleanD.AVG_truth.tolist()
    toprint = zip(players, AVG_MLE, mean_mus, CI95s, AVG_truth, truth_in_CI95s)
    #posterior_mus = pd.DataFrame(np.array(mean_mus),columns=["post_AVG"])
    #posteriorD = fullD.append(posterior_mus)
    print "\nPlayer, AVG_MLE, AVG_posterior, AVG_95CI, AVG_truth, truth_in_95CI: \n"
    for row in toprint:
        print row

    return toprint



###############################################################################

def main():

    #Read data
    aprilD = pd.read_table(DATA_FOLDER + "/laa_2011_april.txt", sep = "\t", header=0, index_col=None)
    fullD = pd.read_table(DATA_FOLDER + "/laa_2011_full.txt", sep = "\t", header=0, index_col=None)
    cleanD = combine_raw_data(aprilD, fullD)

    #1) Find the MLE of mu_i for each player from the April data.
    get_MLEs(cleanD)

    #2) Draw a sample from the posterior (of size > 1000) assuming a Beta 
        # prior for each mu_i and summarize results
    prior_params = get_prior_params()
    posteriorD = sample_posterior(cleanD, prior_params)
    

    #5) Make the following plots:
        #1. The full-season batting average of each player versus the MLE from (a)
    plt.plot(aprilD.AVG, fullD.AVG)
    plt.savefig("fullD_vs_aprilD.pdf")
        #2. The full-season batting average of each player versus the posterior mean from (d) 
            #(Include error bars to show the 95% CI).
    #plt.plot(posteriorD.AVG, fullD.AVG)
    #plt.savefig("fullD_vs_posterior.pdf")
    


main()


